
public class SinglyLinkedList  {
	public static class ListNode {
	private	int data;
	private	ListNode next;
	public ListNode (int data)
	{
		this.data=data;
		next=null;
	}
		
	}
	
	public ListNode add (ListNode head,int data,int position)
	{
		ListNode current =head;
		ListNode newnode=new ListNode(data);
		for (int i=0;i<position-1;i++)
		{
		current=current.next;	
		}
		newnode.next=current.next;
		current.next=newnode;
		
		
		return head;
	}
	public ListNode insertatend(ListNode head,int data)
	{
		ListNode node =new ListNode(data);
		
		ListNode current =head;
		
		while (current.next!=null)
		{
		current=current.next;	
			
			
		}
		current.next=node;
		
			return head;
		
	}
	public ListNode get (ListNode head ,int index)
	{
	ListNode current =head;
	for (int i=0;i< index;i++)
	{
		current =current.next;
	}
		
	return current;	
		
		
	}
	public void set (int index, ListNode newnode,ListNode head)
	{ 
		ListNode current =head;
		ListNode previous=head;
		for (int i=0; i<index-1 ;i++)
		{
			current=current.next;
			previous=previous.next;
		}
		previous.next=newnode;
		newnode.next=current.next;
	}

	public int  getlength (ListNode head)
	{
		ListNode current =head;
		int count=0;
		while (current!=null)
		{
			count++;
			current=current.next;	
		}
		 return count;
	}
	public ListNode deletlast(ListNode head)
	{
		ListNode current=head;
		for (int i=0;i<getlength(head)-2;i++)
		{
			current=current.next;
			
		}
		current.next=null;
		return head;
		
	}
	public void clear (ListNode head)
	{
	ListNode current = head;
	while (getlength(head)!=0)
	{
		deletlast(head);
	}	
	}
	public boolean isempty (ListNode head)
	{
		if (getlength(head)==0)
		{
			return true;
		}
		else 
			return false;
	}
	public ListNode remove (ListNode head,int index)
	{
		ListNode current =head;
		ListNode prev=head.next;
		for (int i=0;i<index-1;i++)
		{
			current=current.next;
			prev=prev.next;
			
		}
		current.next=prev.next;
		prev.next=null;
		return head;
			
	}

	public void display (ListNode head)
	{
		ListNode current =head;
		if (head==null)
		{
			return;
		}
		while (current != null)
		{
			
			System.out.print(current.data + "-->");
			current =current.next;
		}
		System.out.print(current);
		
	}
	public ListNode sublist (int fromindex,int toindex,ListNode head)
	{
		ListNode current =head;
		if (fromindex ==0)
		{
		display(head);		
		}
		else {	
	for (int i=0;i<fromindex-1 ;i++)	
	{
	current=current.next;		
	}
	for (int i=fromindex;i<toindex+1;i++)	
	{
		current=current.next;
		System.out.print(current.data+"  ");
	}
		}
	return head;	
	}
	public boolean contain (ListNode head,ListNode node)
	{
		ListNode current =head;

	while (current!=null)
	{ 
		if (current.data==node.data)
			return true;
	current=current.next;
	
	}
		return false;	
	}



}
